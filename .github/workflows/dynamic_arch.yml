name: continuous build

on: [push, pull_request]

jobs:

  build_arm:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        fortran: [gfortran]
        build: [cmake, make]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Setup up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm64

      #- name: Get Markupsafe cache
      #  uses: actions/cache@v2
      #  id: markupsafe-cache
      #  with:
      #    path: markupsafe-cache/
      #    key: markupsafe-cache
      - name: Compilation cache
        uses: actions/cache@v2
        with:
          path: ~/.ccache
          # We include the commit sha in the cache key, as new cache entries are
          # only created if there is no existing entry for the key yet.
          key: ${{ runner.os }}-ccache-${{ github.sha }}
          # Restore any ccache cache entry, if none for
          # ${{ runner.os }}-ccache-${{ github.sha }} exists
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Install Dependencies
        uses: docker/setup-qemu-action@v1
        with: 
          platforms: arm64
          run: sudo apt-get install -y gfortran cmake ccache
            #else
            #echo "$RUNNER_OS not supported"
            #exit 1
            #fi
            #ccache -M 300M  # Limit the ccache size; Github's overall cache limit is 5GB

      - name: gfortran build
        #if: matrix.build == 'make' && matrix.fortran == 'gfortran'
        run: |
          #  if [ "$RUNNER_OS" == "Linux" ]; then
          export PATH="/usr/lib/ccache:${PATH}"
            #else
            #echo "$RUNNER_OS not supported"
            #exit 1
            #fi

          make -j$(nproc) DYNAMIC_ARCH=1 USE_OPENMP=1
